// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: fiat.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFiatAccount = `-- name: CreateFiatAccount :exec
INSERT INTO fiat_accounts (client_id, currency)
VALUES ($1, $2)
`

type CreateFiatAccountParams struct {
	ClientID pgtype.UUID `json:"clientID"`
	Currency Currency    `json:"currency"`
}

func (q *Queries) CreateFiatAccount(ctx context.Context, arg CreateFiatAccountParams) error {
	_, err := q.db.Exec(ctx, createFiatAccount, arg.ClientID, arg.Currency)
	return err
}

const generalLedgerDepositFiatAccount = `-- name: GeneralLedgerDepositFiatAccount :one
INSERT INTO fiat_general_ledger (
    client_id,
    currency,
    ammount,
    transacted_at,
    tx_id)
SELECT
    client_id,
    $1,
    $2,
    $3,
    $4
FROM
    users AS client_id
WHERE
    username = 'deposit-fiat'
RETURNING
    tx_id
`

type GeneralLedgerDepositFiatAccountParams struct {
	Currency     Currency           `json:"currency"`
	Ammount      pgtype.Numeric     `json:"ammount"`
	TransactedAt pgtype.Timestamptz `json:"transactedAt"`
	TxID         pgtype.UUID        `json:"txID"`
}

func (q *Queries) GeneralLedgerDepositFiatAccount(ctx context.Context, arg GeneralLedgerDepositFiatAccountParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, generalLedgerDepositFiatAccount,
		arg.Currency,
		arg.Ammount,
		arg.TransactedAt,
		arg.TxID,
	)
	var tx_id pgtype.UUID
	err := row.Scan(&tx_id)
	return tx_id, err
}

const generalLedgerEntryFiatAccount = `-- name: GeneralLedgerEntryFiatAccount :one
INSERT INTO  fiat_general_ledger (client_id, currency, ammount, transacted_at)
VALUES ($1, $2, $3, $4)
RETURNING tx_id
`

type GeneralLedgerEntryFiatAccountParams struct {
	ClientID     pgtype.UUID        `json:"clientID"`
	Currency     Currency           `json:"currency"`
	Ammount      pgtype.Numeric     `json:"ammount"`
	TransactedAt pgtype.Timestamptz `json:"transactedAt"`
}

func (q *Queries) GeneralLedgerEntryFiatAccount(ctx context.Context, arg GeneralLedgerEntryFiatAccountParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, generalLedgerEntryFiatAccount,
		arg.ClientID,
		arg.Currency,
		arg.Ammount,
		arg.TransactedAt,
	)
	var tx_id pgtype.UUID
	err := row.Scan(&tx_id)
	return tx_id, err
}

const updateBalanceFiatAccount = `-- name: UpdateBalanceFiatAccount :one
UPDATE fiat_accounts
SET balance=balance + $3, last_tx=$3, last_tx_ts=now()
WHERE client_id=$1 AND currency=$2
RETURNING balance, last_tx, last_tx_ts
`

type UpdateBalanceFiatAccountParams struct {
	ClientID pgtype.UUID    `json:"clientID"`
	Currency Currency       `json:"currency"`
	LastTx   pgtype.Numeric `json:"lastTx"`
}

type UpdateBalanceFiatAccountRow struct {
	Balance  pgtype.Numeric     `json:"balance"`
	LastTx   pgtype.Numeric     `json:"lastTx"`
	LastTxTs pgtype.Timestamptz `json:"lastTxTs"`
}

func (q *Queries) UpdateBalanceFiatAccount(ctx context.Context, arg UpdateBalanceFiatAccountParams) (UpdateBalanceFiatAccountRow, error) {
	row := q.db.QueryRow(ctx, updateBalanceFiatAccount, arg.ClientID, arg.Currency, arg.LastTx)
	var i UpdateBalanceFiatAccountRow
	err := row.Scan(&i.Balance, &i.LastTx, &i.LastTxTs)
	return i, err
}
