// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package postgres

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/shopspring/decimal"
)

type Querier interface {
	// FiatCreateAccount inserts a fiat account record.
	FiatCreateAccount(ctx context.Context, arg *FiatCreateAccountParams) (int64, error)
	// FiatExternalTransferJournalEntry will create both journal entries for fiat accounts inbound deposits.
	FiatExternalTransferJournalEntry(ctx context.Context, arg *FiatExternalTransferJournalEntryParams) (FiatExternalTransferJournalEntryRow, error)
	// FiatGetAccount will retrieve a specific user's account for a given currency.
	FiatGetAccount(ctx context.Context, arg *FiatGetAccountParams) (FiatAccount, error)
	// FiatGetAllAccounts will retrieve all accounts associated with a specific user.
	FiatGetAllAccounts(ctx context.Context, clientID uuid.UUID) ([]FiatAccount, error)
	// FiatGetJournalTransaction will retrieve the journal entries associated with a transaction.
	FiatGetJournalTransaction(ctx context.Context, txID uuid.UUID) ([]FiatJournal, error)
	// FiatGetJournalTransactionForAccount will retrieve the journal entries associated with a specific account.
	FiatGetJournalTransactionForAccount(ctx context.Context, arg *FiatGetJournalTransactionForAccountParams) ([]FiatJournal, error)
	// FiatGetJournalTransactionForAccountBetweenDates will retrieve the journal entries associated with a specific account
	// in a date range.
	FiatGetJournalTransactionForAccountBetweenDates(ctx context.Context, arg *FiatGetJournalTransactionForAccountBetweenDatesParams) ([]FiatJournal, error)
	// FiatInternalTransferJournalEntry will create both journal entries for fiat account internal transfers.
	FiatInternalTransferJournalEntry(ctx context.Context, arg *FiatInternalTransferJournalEntryParams) (FiatInternalTransferJournalEntryRow, error)
	// FiatRowLockAccount will acquire a row level lock without locks on the foreign keys.
	FiatRowLockAccount(ctx context.Context, arg *FiatRowLockAccountParams) (decimal.Decimal, error)
	// FiatUpdateAccountBalance will add an amount to a fiat accounts balance.
	FiatUpdateAccountBalance(ctx context.Context, arg *FiatUpdateAccountBalanceParams) (FiatUpdateAccountBalanceRow, error)
	// testRoundHalfEven
	testRoundHalfEven(ctx context.Context, arg *testRoundHalfEvenParams) (decimal.Decimal, error)
	// userCreate will create a new user record.
	userCreate(ctx context.Context, arg *userCreateParams) (uuid.UUID, error)
	// userDelete will soft delete a users account.
	userDelete(ctx context.Context, username string) (pgconn.CommandTag, error)
	// userGetClientId will retrieve a users client id.
	userGetClientId(ctx context.Context, username string) (uuid.UUID, error)
	// userGetCredentials will retrieve a users client id and password.
	userGetCredentials(ctx context.Context, username string) (userGetCredentialsRow, error)
	// userGetInfo will retrieve a single users account information.
	userGetInfo(ctx context.Context, username string) (userGetInfoRow, error)
}

var _ Querier = (*Queries)(nil)
