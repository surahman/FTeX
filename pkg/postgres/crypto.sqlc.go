// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: crypto.sql

package postgres

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const cryptoCreateAccount = `-- name: cryptoCreateAccount :execrows
INSERT INTO crypto_accounts (client_id, ticker)
VALUES ($1, $2)
`

type cryptoCreateAccountParams struct {
	ClientID uuid.UUID `json:"clientID"`
	Ticker   string    `json:"ticker"`
}

// cryptoCreateAccount inserts a fiat account record.
func (q *Queries) cryptoCreateAccount(ctx context.Context, arg *cryptoCreateAccountParams) (int64, error) {
	result, err := q.db.Exec(ctx, cryptoCreateAccount, arg.ClientID, arg.Ticker)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const cryptoGetAccount = `-- name: cryptoGetAccount :one
SELECT ticker, balance, last_tx, last_tx_ts, created_at, client_id
FROM crypto_accounts
WHERE client_id=$1 AND ticker=$2
`

type cryptoGetAccountParams struct {
	ClientID uuid.UUID `json:"clientID"`
	Ticker   string    `json:"ticker"`
}

// cryptoGetAccount will retrieve a specific user's account for a given cryptocurrency ticker.
func (q *Queries) cryptoGetAccount(ctx context.Context, arg *cryptoGetAccountParams) (CryptoAccount, error) {
	row := q.db.QueryRow(ctx, cryptoGetAccount, arg.ClientID, arg.Ticker)
	var i CryptoAccount
	err := row.Scan(
		&i.Ticker,
		&i.Balance,
		&i.LastTx,
		&i.LastTxTs,
		&i.CreatedAt,
		&i.ClientID,
	)
	return i, err
}

const cryptoGetAllAccounts = `-- name: cryptoGetAllAccounts :many
SELECT ticker, balance, last_tx, last_tx_ts, created_at, client_id
FROM crypto_accounts
WHERE client_id=$1 AND ticker >= $2
ORDER BY ticker
LIMIT $3
`

type cryptoGetAllAccountsParams struct {
	ClientID uuid.UUID `json:"clientID"`
	Ticker   string    `json:"ticker"`
	Limit    int32     `json:"limit"`
}

// cryptoGetAllAccounts will retrieve all accounts associated with a specific user.
func (q *Queries) cryptoGetAllAccounts(ctx context.Context, arg *cryptoGetAllAccountsParams) ([]CryptoAccount, error) {
	rows, err := q.db.Query(ctx, cryptoGetAllAccounts, arg.ClientID, arg.Ticker, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CryptoAccount
	for rows.Next() {
		var i CryptoAccount
		if err := rows.Scan(
			&i.Ticker,
			&i.Balance,
			&i.LastTx,
			&i.LastTxTs,
			&i.CreatedAt,
			&i.ClientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const cryptoGetAllJournalTransactionsPaginated = `-- name: cryptoGetAllJournalTransactionsPaginated :many
SELECT ticker, amount, transacted_at, client_id, tx_id
FROM crypto_journal
WHERE client_id = $1
      AND ticker = $2
      AND transacted_at
          BETWEEN $5::timestamptz
              AND $6::timestamptz
ORDER BY transacted_at DESC
OFFSET $3
LIMIT $4
`

type cryptoGetAllJournalTransactionsPaginatedParams struct {
	ClientID  uuid.UUID          `json:"clientID"`
	Ticker    string             `json:"ticker"`
	Offset    int32              `json:"offset"`
	Limit     int32              `json:"limit"`
	StartTime pgtype.Timestamptz `json:"startTime"`
	EndTime   pgtype.Timestamptz `json:"endTime"`
}

// cryptoGetAllJournalTransactionsPaginated will retrieve the journal entries associated with a specific account
// in a date range.
func (q *Queries) cryptoGetAllJournalTransactionsPaginated(ctx context.Context, arg *cryptoGetAllJournalTransactionsPaginatedParams) ([]CryptoJournal, error) {
	rows, err := q.db.Query(ctx, cryptoGetAllJournalTransactionsPaginated,
		arg.ClientID,
		arg.Ticker,
		arg.Offset,
		arg.Limit,
		arg.StartTime,
		arg.EndTime,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CryptoJournal
	for rows.Next() {
		var i CryptoJournal
		if err := rows.Scan(
			&i.Ticker,
			&i.Amount,
			&i.TransactedAt,
			&i.ClientID,
			&i.TxID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const cryptoGetJournalTransaction = `-- name: cryptoGetJournalTransaction :many
SELECT ticker, amount, transacted_at, client_id, tx_id
FROM crypto_journal
WHERE client_id = $1 AND tx_id = $2
`

type cryptoGetJournalTransactionParams struct {
	ClientID uuid.UUID `json:"clientID"`
	TxID     uuid.UUID `json:"txID"`
}

// cryptoGetJournalTransaction will retrieve the journal entries associated with a transaction.
func (q *Queries) cryptoGetJournalTransaction(ctx context.Context, arg *cryptoGetJournalTransactionParams) ([]CryptoJournal, error) {
	rows, err := q.db.Query(ctx, cryptoGetJournalTransaction, arg.ClientID, arg.TxID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CryptoJournal
	for rows.Next() {
		var i CryptoJournal
		if err := rows.Scan(
			&i.Ticker,
			&i.Amount,
			&i.TransactedAt,
			&i.ClientID,
			&i.TxID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const cryptoPurchase = `-- name: cryptoPurchase :exec
CALL purchase_cryptocurrency($1,$2,$3, $5::numeric(18, 2), $4, $6::numeric(24, 8))
`

type cryptoPurchaseParams struct {
	TransactionID      uuid.UUID       `json:"TransactionID"`
	ClientID           uuid.UUID       `json:"ClientID"`
	FiatCurrency       Currency        `json:"FiatCurrency"`
	CryptoTicker       string          `json:"CryptoTicker"`
	FiatDebitAmount    decimal.Decimal `json:"fiatDebitAmount"`
	CryptoCreditAmount decimal.Decimal `json:"cryptoCreditAmount"`
}

// cryptoPurchase will execute a transaction to purchase a Cryptocurrency using a Fiat currency.
func (q *Queries) cryptoPurchase(ctx context.Context, arg *cryptoPurchaseParams) error {
	_, err := q.db.Exec(ctx, cryptoPurchase,
		arg.TransactionID,
		arg.ClientID,
		arg.FiatCurrency,
		arg.CryptoTicker,
		arg.FiatDebitAmount,
		arg.CryptoCreditAmount,
	)
	return err
}

const cryptoSell = `-- name: cryptoSell :exec
CALL sell_cryptocurrency($1,$2,$3, $5::numeric(18, 2), $4, $6::numeric(24, 8))
`

type cryptoSellParams struct {
	TransactionID     uuid.UUID       `json:"TransactionID"`
	ClientID          uuid.UUID       `json:"ClientID"`
	FiatCurrency      Currency        `json:"FiatCurrency"`
	CryptoTicker      string          `json:"CryptoTicker"`
	FiatCreditAmount  decimal.Decimal `json:"fiatCreditAmount"`
	CryptoDebitAmount decimal.Decimal `json:"cryptoDebitAmount"`
}

// cryptoSell will execute a transaction to sell a Cryptocurrency and purchase a Fiat currency.
func (q *Queries) cryptoSell(ctx context.Context, arg *cryptoSellParams) error {
	_, err := q.db.Exec(ctx, cryptoSell,
		arg.TransactionID,
		arg.ClientID,
		arg.FiatCurrency,
		arg.CryptoTicker,
		arg.FiatCreditAmount,
		arg.CryptoDebitAmount,
	)
	return err
}
