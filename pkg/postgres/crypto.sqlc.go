// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: crypto.sql

package postgres

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/shopspring/decimal"
)

const callPurchaseCrypto = `-- name: callPurchaseCrypto :exec
CALL purchase_cryptocurrency($1,$2,$3, $5::numeric(18, 2), $4, $6::numeric(24, 8))
`

type callPurchaseCryptoParams struct {
	TransactionID      uuid.UUID       `json:"TransactionID"`
	ClientID           uuid.UUID       `json:"ClientID"`
	FiatCurrency       Currency        `json:"FiatCurrency"`
	CryptoTicker       string          `json:"CryptoTicker"`
	FiatDebitAmount    decimal.Decimal `json:"fiatDebitAmount"`
	CryptoCreditAmount decimal.Decimal `json:"cryptoCreditAmount"`
}

// purchaseCrypto will execute a transaction to purchase a crypto currency.
func (q *Queries) callPurchaseCrypto(ctx context.Context, arg *callPurchaseCryptoParams) error {
	_, err := q.db.Exec(ctx, callPurchaseCrypto,
		arg.TransactionID,
		arg.ClientID,
		arg.FiatCurrency,
		arg.CryptoTicker,
		arg.FiatDebitAmount,
		arg.CryptoCreditAmount,
	)
	return err
}

const cryptoCreateAccount = `-- name: cryptoCreateAccount :execrows
INSERT INTO crypto_accounts (client_id, ticker)
VALUES ($1, $2)
`

type cryptoCreateAccountParams struct {
	ClientID uuid.UUID `json:"clientID"`
	Ticker   string    `json:"ticker"`
}

// cryptoCreateAccount inserts a fiat account record.
func (q *Queries) cryptoCreateAccount(ctx context.Context, arg *cryptoCreateAccountParams) (int64, error) {
	result, err := q.db.Exec(ctx, cryptoCreateAccount, arg.ClientID, arg.Ticker)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
