// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const userCreate = `-- name: UserCreate :one
INSERT INTO users (username, password, first_name, last_name, email)
VALUES ($1, $2, $3, $4, $5)
RETURNING client_id
`

type UserCreateParams struct {
	Username  string `json:"username"`
	Password  string `json:"password"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
}

// UserCreate will create a new user record.
func (q *Queries) UserCreate(ctx context.Context, arg *UserCreateParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, userCreate,
		arg.Username,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var client_id pgtype.UUID
	err := row.Scan(&client_id)
	return client_id, err
}

const userDelete = `-- name: UserDelete :execresult
UPDATE users
SET is_deleted=true
WHERE username=$1 AND is_deleted=false
`

// UserDelete will soft delete a users account.
func (q *Queries) UserDelete(ctx context.Context, username string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, userDelete, username)
}

const userGetClientId = `-- name: UserGetClientId :one
SELECT client_id
FROM users
WHERE username=$1
LIMIT 1
`

// UserGetClientId will retrieve a users client id.
func (q *Queries) UserGetClientId(ctx context.Context, username string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, userGetClientId, username)
	var client_id pgtype.UUID
	err := row.Scan(&client_id)
	return client_id, err
}

const userGetCredentials = `-- name: UserGetCredentials :one
SELECT client_id, password
FROM users
WHERE username=$1 AND is_deleted=false
LIMIT 1
`

type UserGetCredentialsRow struct {
	ClientID pgtype.UUID `json:"clientID"`
	Password string      `json:"password"`
}

// UserGetCredentials will retrieve a users client id and password.
func (q *Queries) UserGetCredentials(ctx context.Context, username string) (UserGetCredentialsRow, error) {
	row := q.db.QueryRow(ctx, userGetCredentials, username)
	var i UserGetCredentialsRow
	err := row.Scan(&i.ClientID, &i.Password)
	return i, err
}

const userGetInfo = `-- name: UserGetInfo :one
SELECT first_name, last_name, email, client_id, is_deleted
FROM users
WHERE username=$1
LIMIT 1
`

type UserGetInfoRow struct {
	FirstName string      `json:"firstName"`
	LastName  string      `json:"lastName"`
	Email     string      `json:"email"`
	ClientID  pgtype.UUID `json:"clientID"`
	IsDeleted bool        `json:"isDeleted"`
}

// UserGetInfo will retrieve a single users account information.
func (q *Queries) UserGetInfo(ctx context.Context, username string) (UserGetInfoRow, error) {
	row := q.db.QueryRow(ctx, userGetInfo, username)
	var i UserGetInfoRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.ClientID,
		&i.IsDeleted,
	)
	return i, err
}
