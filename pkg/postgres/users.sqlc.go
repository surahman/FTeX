// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, first_name, last_name, email)
VALUES ($1, $2, $3, $4, $5)
RETURNING client_id
`

type CreateUserParams struct {
	Username  string `json:"username"`
	Password  string `json:"password"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var client_id pgtype.UUID
	err := row.Scan(&client_id)
	return client_id, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET is_deleted=true
WHERE username=$1 AND is_deleted=false
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteUser, username)
	return err
}

const getClientIdUser = `-- name: GetClientIdUser :one
SELECT client_id
FROM users
WHERE username=$1
LIMIT 1
`

func (q *Queries) GetClientIdUser(ctx context.Context, username string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getClientIdUser, username)
	var client_id pgtype.UUID
	err := row.Scan(&client_id)
	return client_id, err
}

const getCredentialsUser = `-- name: GetCredentialsUser :one
SELECT client_id, password
FROM users
WHERE username=$1 AND is_deleted=false
LIMIT 1
`

type GetCredentialsUserRow struct {
	ClientID pgtype.UUID `json:"clientID"`
	Password string      `json:"password"`
}

func (q *Queries) GetCredentialsUser(ctx context.Context, username string) (GetCredentialsUserRow, error) {
	row := q.db.QueryRow(ctx, getCredentialsUser, username)
	var i GetCredentialsUserRow
	err := row.Scan(&i.ClientID, &i.Password)
	return i, err
}
