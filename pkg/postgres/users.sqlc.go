// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users.sql

package postgres

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgconn"
)

const userCreate = `-- name: userCreate :one
INSERT INTO users (username, password, first_name, last_name, email)
VALUES ($1, $2, $3, $4, $5)
RETURNING client_id
`

type userCreateParams struct {
	Username  string `json:"username"`
	Password  string `json:"password"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
}

// userCreate will create a new user record.
func (q *Queries) userCreate(ctx context.Context, arg *userCreateParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, userCreate,
		arg.Username,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var client_id uuid.UUID
	err := row.Scan(&client_id)
	return client_id, err
}

const userDelete = `-- name: userDelete :execresult
UPDATE users
SET is_deleted=true
WHERE username=$1 AND is_deleted=false
`

// userDelete will soft delete a users account.
func (q *Queries) userDelete(ctx context.Context, username string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, userDelete, username)
}

const userGetClientId = `-- name: userGetClientId :one
SELECT client_id
FROM users
WHERE username=$1
LIMIT 1
`

// userGetClientId will retrieve a users client id.
func (q *Queries) userGetClientId(ctx context.Context, username string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, userGetClientId, username)
	var client_id uuid.UUID
	err := row.Scan(&client_id)
	return client_id, err
}

const userGetCredentials = `-- name: userGetCredentials :one
SELECT client_id, password
FROM users
WHERE username=$1 AND is_deleted=false
LIMIT 1
`

type userGetCredentialsRow struct {
	ClientID uuid.UUID `json:"clientID"`
	Password string    `json:"password"`
}

// userGetCredentials will retrieve a users client id and password.
func (q *Queries) userGetCredentials(ctx context.Context, username string) (userGetCredentialsRow, error) {
	row := q.db.QueryRow(ctx, userGetCredentials, username)
	var i userGetCredentialsRow
	err := row.Scan(&i.ClientID, &i.Password)
	return i, err
}

const userGetInfo = `-- name: userGetInfo :one
SELECT first_name, last_name, email, client_id, is_deleted
FROM users
WHERE username=$1
LIMIT 1
`

type userGetInfoRow struct {
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Email     string    `json:"email"`
	ClientID  uuid.UUID `json:"clientID"`
	IsDeleted bool      `json:"isDeleted"`
}

// userGetInfo will retrieve a single users account information.
func (q *Queries) userGetInfo(ctx context.Context, username string) (userGetInfoRow, error) {
	row := q.db.QueryRow(ctx, userGetInfo, username)
	var i userGetInfoRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.ClientID,
		&i.IsDeleted,
	)
	return i, err
}
