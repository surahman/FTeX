package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"errors"

	"github.com/gofrs/uuid"
	"github.com/surahman/FTeX/pkg/models"
	"github.com/surahman/FTeX/pkg/postgres"
	"go.uber.org/zap"
)

// OpenFiat is the resolver for the openFiat field.
func (r *mutationResolver) OpenFiat(ctx context.Context, currency string) (*models.FiatOpenAccountResponse, error) {
	var (
		clientID   uuid.UUID
		pgCurrency postgres.Currency
		err        error
	)

	if clientID, _, err = AuthorizationCheck(ctx, r.auth, r.logger, r.authHeaderKey); err != nil {
		return nil, errors.New("authorization failure")
	}

	// Extract and validate the currency.
	if err = pgCurrency.Scan(currency); err != nil || !pgCurrency.Valid() {
		return nil, errors.New("invalid currency")
	}

	if err = r.db.FiatCreateAccount(clientID, pgCurrency); err != nil {
		var createErr *postgres.Error
		if !errors.As(err, &createErr) {
			r.logger.Info("failed to unpack open Fiat account error", zap.Error(err))

			return nil, errors.New("please retry your request later")
		}

		return nil, errors.New(createErr.Message)
	}

	return &models.FiatOpenAccountResponse{ClientID: clientID.String(), Currency: currency}, nil
}
