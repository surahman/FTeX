package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"errors"
	"fmt"

	"github.com/gofrs/uuid"
	"github.com/shopspring/decimal"
	"github.com/surahman/FTeX/pkg/constants"
	graphql_generated "github.com/surahman/FTeX/pkg/graphql/generated"
	"github.com/surahman/FTeX/pkg/models"
	"github.com/surahman/FTeX/pkg/postgres"
	"github.com/surahman/FTeX/pkg/validator"
	"go.uber.org/zap"
)

// TxID is the resolver for the txId field.
func (r *fiatDepositResponseResolver) TxID(ctx context.Context, obj *postgres.FiatAccountTransferResult) (string, error) {
	return obj.TxID.String(), nil
}

// ClientID is the resolver for the clientId field.
func (r *fiatDepositResponseResolver) ClientID(ctx context.Context, obj *postgres.FiatAccountTransferResult) (string, error) {
	return obj.ClientID.String(), nil
}

// TxTimestamp is the resolver for the txTimestamp field.
func (r *fiatDepositResponseResolver) TxTimestamp(ctx context.Context, obj *postgres.FiatAccountTransferResult) (string, error) {
	return obj.TxTS.Time.String(), nil
}

// Balance is the resolver for the balance field.
func (r *fiatDepositResponseResolver) Balance(ctx context.Context, obj *postgres.FiatAccountTransferResult) (string, error) {
	return obj.Balance.String(), nil
}

// LastTx is the resolver for the lastTx field.
func (r *fiatDepositResponseResolver) LastTx(ctx context.Context, obj *postgres.FiatAccountTransferResult) (string, error) {
	return obj.LastTx.String(), nil
}

// Currency is the resolver for the currency field.
func (r *fiatDepositResponseResolver) Currency(ctx context.Context, obj *postgres.FiatAccountTransferResult) (string, error) {
	return string(obj.Currency), nil
}

// DebitAmount is the resolver for the DebitAmount field.
func (r *fiatExchangeOfferResponseResolver) DebitAmount(ctx context.Context, obj *models.HTTPFiatExchangeOfferResponse) (float64, error) {
	return obj.DebitAmount.InexactFloat64(), nil
}

// OpenFiat is the resolver for the openFiat field.
func (r *mutationResolver) OpenFiat(ctx context.Context, currency string) (*models.FiatOpenAccountResponse, error) {
	var (
		clientID   uuid.UUID
		pgCurrency postgres.Currency
		err        error
	)

	if clientID, _, err = AuthorizationCheck(ctx, r.auth, r.logger, r.authHeaderKey); err != nil {
		return nil, errors.New("authorization failure")
	}

	// Extract and validate the currency.
	if err = pgCurrency.Scan(currency); err != nil || !pgCurrency.Valid() {
		return nil, errors.New("invalid currency")
	}

	if err = r.db.FiatCreateAccount(clientID, pgCurrency); err != nil {
		var createErr *postgres.Error
		if !errors.As(err, &createErr) {
			r.logger.Info("failed to unpack open Fiat account error", zap.Error(err))

			return nil, errors.New("please retry your request later")
		}

		return nil, errors.New(createErr.Message)
	}

	return &models.FiatOpenAccountResponse{ClientID: clientID.String(), Currency: currency}, nil
}

// DepositFiat is the resolver for the depositFiat field.
func (r *mutationResolver) DepositFiat(ctx context.Context, input models.HTTPDepositCurrencyRequest) (*postgres.FiatAccountTransferResult, error) {
	var (
		clientID        uuid.UUID
		currency        postgres.Currency
		err             error
		transferReceipt *postgres.FiatAccountTransferResult
	)

	if err = validator.ValidateStruct(&input); err != nil {
		return nil, fmt.Errorf("validation %w", err)
	}

	// Extract and validate the currency.
	if err = currency.Scan(input.Currency); err != nil || !currency.Valid() {
		return nil, fmt.Errorf("invalid currency")
	}

	// Check for correct decimal places.
	if !input.Amount.Equal(input.Amount.Truncate(constants.GetDecimalPlacesFiat())) || input.Amount.IsNegative() {
		return nil, fmt.Errorf("invalid amount")
	}

	if clientID, _, err = AuthorizationCheck(ctx, r.auth, r.logger, r.authHeaderKey); err != nil {
		return nil, errors.New("authorization failure")
	}

	if transferReceipt, err = r.db.FiatExternalTransfer(context.Background(),
		&postgres.FiatTransactionDetails{
			ClientID: clientID,
			Currency: currency,
			Amount:   input.Amount}); err != nil {
		var createErr *postgres.Error
		if !errors.As(err, &createErr) {
			r.logger.Info("failed to unpack deposit Fiat account error", zap.Error(err))

			return nil, errors.New("please retry your request later")
		}

		return nil, errors.New(createErr.Message)
	}

	return transferReceipt, nil
}

// Amount is the resolver for the amount field.
func (r *fiatDepositRequestResolver) Amount(ctx context.Context, obj *models.HTTPDepositCurrencyRequest, data float64) error {
	obj.Amount = decimal.NewFromFloat(data)

	return nil
}

// SourceAmount is the resolver for the sourceAmount field.
func (r *fiatExchangeOfferRequestResolver) SourceAmount(ctx context.Context, obj *models.HTTPFiatExchangeOfferRequest, data float64) error {
	obj.SourceAmount = decimal.NewFromFloat(data)

	return nil
}

// FiatDepositResponse returns graphql_generated.FiatDepositResponseResolver implementation.
func (r *Resolver) FiatDepositResponse() graphql_generated.FiatDepositResponseResolver {
	return &fiatDepositResponseResolver{r}
}

// FiatExchangeOfferResponse returns graphql_generated.FiatExchangeOfferResponseResolver implementation.
func (r *Resolver) FiatExchangeOfferResponse() graphql_generated.FiatExchangeOfferResponseResolver {
	return &fiatExchangeOfferResponseResolver{r}
}

// FiatDepositRequest returns graphql_generated.FiatDepositRequestResolver implementation.
func (r *Resolver) FiatDepositRequest() graphql_generated.FiatDepositRequestResolver {
	return &fiatDepositRequestResolver{r}
}

// FiatExchangeOfferRequest returns graphql_generated.FiatExchangeOfferRequestResolver implementation.
func (r *Resolver) FiatExchangeOfferRequest() graphql_generated.FiatExchangeOfferRequestResolver {
	return &fiatExchangeOfferRequestResolver{r}
}

type fiatDepositResponseResolver struct{ *Resolver }
type fiatExchangeOfferResponseResolver struct{ *Resolver }
type fiatDepositRequestResolver struct{ *Resolver }
type fiatExchangeOfferRequestResolver struct{ *Resolver }
