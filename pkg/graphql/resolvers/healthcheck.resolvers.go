package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	graphql_generated "github.com/surahman/FTeX/pkg/graphql/generated"
	"go.uber.org/zap"
)

// Healthcheck is the resolver for the healthcheck field.
func (r *queryResolver) Healthcheck(ctx context.Context) (string, error) {
	// Database health.
	if err := r.db.Healthcheck(); err != nil {
		msg := "healthcheck failed, Postgres could not be pinged"
		r.logger.Warn(msg, zap.Error(err))

		return msg, fmt.Errorf(msg+" %w", err)
	}

	// Cache health.
	if err := r.cache.Healthcheck(); err != nil {
		msg := "healthcheck failed, Redis could not be pinged"
		r.logger.Warn(msg, zap.Error(err))

		return msg, fmt.Errorf(msg+" %w", err)
	}

	return "OK", nil
}

// Query returns graphql_generated.QueryResolver implementation.
func (r *Resolver) Query() graphql_generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
