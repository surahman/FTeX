# UserAccount is user information.
input UserAccount {
    firstname: String!
    lastname: String!
    email: String!
    userLoginCredentials: UserLoginCredentials!
}

# UserLoginCredentials are the user's username and password.
input UserLoginCredentials {
    username: String!
    password: String!
}

# DeleteUserRequest is a user account deletion request.
input DeleteUserRequest {
    username: String!
    password: String!
    confirmation: String!
}

# Requests that might alter the state of data in the database.
type Mutation {
    # registerUser is a user registration request. A JWT authorization token is returned as a successful response.
    registerUser(input: UserAccount): JWTAuthResponse!

    # deleteUser is a mutation to soft delete a user account.
    deleteUser(input: DeleteUserRequest!): String!

    # loginUser is a login request And receive a JWT authorization token in response. This has no side effects but is a
    # mutation to force sequential execution. This stops operations such as delete and refresh from being run in
    # parallel with a login.
    loginUser(input: UserLoginCredentials!): JWTAuthResponse!

    # refreshToken refreshes a users JWT if it is within the refresh time window.
    refreshToken: JWTAuthResponse!
}
