basePath: /api/rest/v1
consumes:
- application/json
definitions:
  models.HTTPError:
    properties:
      message:
        type: string
      payload: {}
    type: object
  models.HTTPSuccess:
    properties:
      message:
        type: string
      payload: {}
    type: object
  models.JWTAuthResponse:
    properties:
      expires:
        description: Expiration time as unix time stamp. Strictly used by client to
          gauge when to refresh the token.
        type: integer
      threshold:
        description: The window in seconds before expiration during which the token
          can be refreshed.
        type: integer
      token:
        description: JWT string sent to and validated by the server.
        type: string
    required:
    - expires
    - threshold
    - token
    type: object
  models.UserAccount:
    properties:
      email:
        maxLength: 64
        type: string
      firstName:
        maxLength: 64
        type: string
      lastName:
        maxLength: 64
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      username:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - username
    type: object
host: localhost:33723
info:
  contact:
    email: saad.ur.rahman@gmail.com
    name: Saad Ur Rahman
    url: https://www.linkedin.com/in/saad-ur-rahman/
  description: |-
    FTeX Fiat and Cryptocurrency Banking API.
    Bank, buy, and sell Fiat and Cryptocurrencies. Prices for all currencies are
    retrieved from real-time quote providers.
  license:
    name: GPL-3.0
    url: https://opensource.org/licenses/GPL-3.0
  title: FTeX, Inc. (Formerly Crypto-Bro's Bank, Inc.)
  version: 1.0.0
paths:
  /health:
    get:
      description: |-
        This endpoint is exposed to allow load balancers etc. to check the health of the service.
        This is achieved by the service pinging the data tier comprised of Postgres and Redis.
      operationId: healthcheck
      produces:
      - application/json
      responses:
        "200":
          description: 'message: healthy'
          schema:
            $ref: '#/definitions/models.HTTPSuccess'
        "503":
          description: error message with any available details
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Healthcheck for service liveness.
      tags:
      - health healthcheck liveness
  /user/register:
    post:
      consumes:
      - application/json
      description: Creates a user account by inserting credentials into the database.
        A hashed password is stored.
      operationId: registerUser
      parameters:
      - description: Username, password, first and last name, email address of user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserAccount'
      produces:
      - application/json
      responses:
        "200":
          description: a valid JWT token for the new account
          schema:
            $ref: '#/definitions/models.JWTAuthResponse'
        "400":
          description: error message with any available details in payload
          schema:
            $ref: '#/definitions/models.HTTPError'
        "409":
          description: error message with any available details in payload
          schema:
            $ref: '#/definitions/models.HTTPError'
        "500":
          description: error message with any available details in payload
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Register a user.
      tags:
      - user users register security
produces:
- application/json
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
